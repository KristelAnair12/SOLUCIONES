# Modificar las funciones substring, leftmatch y rightmatch desarrolladas en los
# ejercicios anteriores para que acepten opciones que permitan eliminar las
# coincidencias más largas posibles del patrón especificado en el lado izquierdo
# o derecho del valor especificado.

gr_opt=
while getopts g opcion
do
    case "$opcion" in
	
	g)  gr_opt=-g;;

	\?) echo "uso: substring [-l] patron_izq valor patron_der"
	    exit 1;;
    esac
done

# Verificar que exactamente se proporcionaron 3 argumentos. $OPTIND apunta a 1
# más allá del índice de la última opción (empezando desde 1), así que debemos
# tener 2 argumentos más después del actual
if [ $(($# - OPTIND)) -ne 2 ]
then
    echo "uso: [-g] substring patron_izq valor patron_der"
    exit 1
fi

# Si es necesario, desplazar los argumentos pasados por las opciones
shiftcount=$((OPTIND - 1))
shift $shiftcount

# Asociar nombres a los parámetros posicionales para mayor claridad
lpattern="$1"
value="$2"
rpattern="$3"

# Calcular la subcadena quitando desde la izquierda y desde la derecha
subs_l=$(5-leftmatch $gr_opt "$lpattern" "$value")
subs_r=$(4-rightmatch $gr_opt "$value" "$rpattern")

# Obtener el número de caracteres en la subcadena izquierda, derecha y en el
# valor original
nchar_l=${#subs_l}
nchar_r=${#subs_r}
nchar_v=${#value}

# Verificar si eliminar la subcadena izquierda y derecha en conjunto borra
# completamente $value: si es así, se imprime una línea en blanco; si no, se
# imprime $value después de eliminar la subcadena izquierda y derecha
if [ $((nchar_l + nchar_r)) -le $nchar_v ]
then
    echo
else
    echo "$(./rightmatch $gr_opt "$subs_l" "$rpattern")"
fi

